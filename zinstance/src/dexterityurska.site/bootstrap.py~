###############################################################################
##
## Copyright (c) 2006 Zope Foundation and Contributors.
## All Rights Reserved.
##
## This software is subject to the provisions of the Zope Public License,
## Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
## THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
## WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
## WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
## FOR A PARTICULAR PURPOSE.
##
###############################################################################
#"""Bootstrap a buildout-based project

#Simply run this script in a directory containing a buildout.cfg.
#The script accepts buildout command-line options, so you can
#use the -c option to specify an alternate configuration file.
#"""

#import os, shutil, sys, tempfile, urllib, urllib2, subprocess
#from optparse import OptionParser

#if sys.platform == 'win32':
    #def quote(c):
        #if ' ' in c:
            #return '"%s"' % c  # work around spawn lamosity on windows
        #else:
            #return c
#else:
    #quote = str

## See zc.buildout.easy_install._has_broken_dash_S for motivation and comments.
#stdout, stderr = subprocess.Popen(
    #[sys.executable, '-Sc',
     #'try:\n'
     #'    import ConfigParser\n'
     #'except ImportError:\n'
     #'    print 1\n'
     #'else:\n'
     #'    print 0\n'],
    #stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
#has_broken_dash_S = bool(int(stdout.strip()))

## In order to be more robust in the face of system Pythons, we want to
## run without site-packages loaded.  This is somewhat tricky, in
## particular because Python 2.6's distutils imports site, so starting
## with the -S flag is not sufficient.  However, we'll start with that:
#if not has_broken_dash_S and 'site' in sys.modules:
    ## We will restart with python -S.
    #args = sys.argv[:]
    #args[0:0] = [sys.executable, '-S']
    #args = map(quote, args)
    #os.execv(sys.executable, args)
## Now we are running with -S.  We'll get the clean sys.path, import site
## because distutils will do it later, and then reset the path and clean
## out any namespace packages from site-packages that might have been
## loaded by .pth files.
#clean_path = sys.path[:]
#import site  # imported because of its side effects
#sys.path[:] = clean_path
#for k, v in sys.modules.items():
    #if k in ('setuptools', 'pkg_resources') or (
        #hasattr(v, '__path__') and
        #len(v.__path__) == 1 and
        #not os.path.exists(os.path.join(v.__path__[0], '__init__.py'))):
        ## This is a namespace package.  Remove it.
        #sys.modules.pop(k)

#is_jython = sys.platform.startswith('java')

#setuptools_source = 'http://peak.telecommunity.com/dist/ez_setup.py'
#distribute_source = 'http://python-distribute.org/distribute_setup.py'


## parsing arguments
#def normalize_to_url(option, opt_str, value, parser):
    #if value:
        #if '://' not in value:  # It doesn't smell like a URL.
            #value = 'file://%s' % (
                #urllib.pathname2url(
                    #os.path.abspath(os.path.expanduser(value))),)
        #if opt_str == '--download-base' and not value.endswith('/'):
            ## Download base needs a trailing slash to make the world happy.
            #value += '/'
    #else:
        #value = None
    #name = opt_str[2:].replace('-', '_')
    #setattr(parser.values, name, value)

#usage = '''\
#[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]

#Bootstraps a buildout-based project.

#Simply run this script in a directory containing a buildout.cfg, using the
#Python that you want bin/buildout to use.

#Note that by using --setup-source and --download-base to point to
#local resources, you can keep this script from going over the network.
#'''

#parser = OptionParser(usage=usage)
#parser.add_option("-v", "--version", dest="version",
                          #help="use a specific zc.buildout version")
#parser.add_option("-d", "--distribute",
                   #action="store_true", dest="use_distribute", default=False,
                   #help="Use Distribute rather than Setuptools.")
#parser.add_option("--setup-source", action="callback", dest="setup_source",
                  #callback=normalize_to_url, nargs=1, type="string",
                  #help=("Specify a URL or file location for the setup file. "
                        #"If you use Setuptools, this will default to " +
                        #setuptools_source + "; if you use Distribute, this "
                        #"will default to " + distribute_source + "."))
#parser.add_option("--download-base", action="callback", dest="download_base",
                  #callback=normalize_to_url, nargs=1, type="string",
                  #help=("Specify a URL or directory for downloading "
                        #"zc.buildout and either Setuptools or Distribute. "
                        #"Defaults to PyPI."))
#parser.add_option("--eggs",
                  #help=("Specify a directory for storing eggs.  Defaults to "
                        #"a temporary directory that is deleted when the "
                        #"bootstrap script completes."))
#parser.add_option("-t", "--accept-buildout-test-releases",
                  #dest='accept_buildout_test_releases',
                  #action="store_true", default=False,
                  #help=("Normally, if you do not specify a --version, the "
                        #"bootstrap script and buildout gets the newest "
                        #"*final* versions of zc.buildout and its recipes and "
                        #"extensions for you.  If you use this flag, "
                        #"bootstrap and buildout will get the newest releases "
                        #"even if they are alphas or betas."))
#parser.add_option("-c", None, action="store", dest="config_file",
                   #help=("Specify the path to the buildout configuration "
                         #"file to be used."))

#options, args = parser.parse_args()

#if options.eggs:
    #eggs_dir = os.path.abspath(os.path.expanduser(options.eggs))
#else:
    #eggs_dir = tempfile.mkdtemp()

#if options.setup_source is None:
    #if options.use_distribute:
        #options.setup_source = distribute_source
    #else:
        #options.setup_source = setuptools_source

#if options.accept_buildout_test_releases:
    #args.insert(0, 'buildout:accept-buildout-test-releases=true')

#try:
    #import pkg_resources
    #import setuptools  # A flag.  Sometimes pkg_resources is installed alone.
    #if not hasattr(pkg_resources, '_distribute'):
        #raise ImportError
#except ImportError:
    #ez_code = urllib2.urlopen(
        #options.setup_source).read().replace('\r\n', '\n')
    #ez = {}
    #exec ez_code in ez
    #setup_args = dict(to_dir=eggs_dir, download_delay=0)
    #if options.download_base:
        #setup_args['download_base'] = options.download_base
    #if options.use_distribute:
        #setup_args['no_fake'] = True
        #if sys.version_info[:2] == (2, 4):
            #setup_args['version'] = '0.6.32'
    #ez['use_setuptools'](**setup_args)
    #if 'pkg_resources' in sys.modules:
        #reload(sys.modules['pkg_resources'])
    #import pkg_resources
    ## This does not (always?) update the default working set.  We will
    ## do it.
    #for path in sys.path:
        #if path not in pkg_resources.working_set.entries:
            #pkg_resources.working_set.add_entry(path)

#cmd = [quote(sys.executable),
       #'-c',
       #quote('from setuptools.command.easy_install import main; main()'),
       #'-mqNxd',
       #quote(eggs_dir)]

#if not has_broken_dash_S:
    #cmd.insert(1, '-S')

#find_links = options.download_base
#if not find_links:
    #find_links = os.environ.get('bootstrap-testing-find-links')
#if not find_links and options.accept_buildout_test_releases:
    #find_links = 'http://downloads.buildout.org/'
#if find_links:
    #cmd.extend(['-f', quote(find_links)])

#if options.use_distribute:
    #setup_requirement = 'distribute'
#else:
    #setup_requirement = 'setuptools'
#ws = pkg_resources.working_set
#setup_requirement_path = ws.find(
    #pkg_resources.Requirement.parse(setup_requirement)).location
#env = dict(
    #os.environ,
    #PYTHONPATH=setup_requirement_path)

#requirement = 'zc.buildout'
#version = options.version
#if version is None and not options.accept_buildout_test_releases:
    ## Figure out the most recent final version of zc.buildout.
    #import setuptools.package_index
    #_final_parts = '*final-', '*final'

    #def _final_version(parsed_version):
        #for part in parsed_version:
            #if (part[:1] == '*') and (part not in _final_parts):
                #return False
        #return True
    #index = setuptools.package_index.PackageIndex(
        #search_path=[setup_requirement_path])
    #if find_links:
        #index.add_find_links((find_links,))
    #req = pkg_resources.Requirement.parse(requirement)
    #if index.obtain(req) is not None:
        #best = []
        #bestv = None
        #for dist in index[req.project_name]:
            #distv = dist.parsed_version
            #if distv >= pkg_resources.parse_version('2dev'):
                #continue
            #if _final_version(distv):
                #if bestv is None or distv > bestv:
                    #best = [dist]
                    #bestv = distv
                #elif distv == bestv:
                    #best.append(dist)
        #if best:
            #best.sort()
            #version = best[-1].version

#if version:
    #requirement += '=='+version
#else:
    #requirement += '<2dev'

#cmd.append(requirement)

#if is_jython:
    #import subprocess
    #exitcode = subprocess.Popen(cmd, env=env).wait()
#else:  # Windows prefers this, apparently; otherwise we would prefer subprocess
    #exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))
#if exitcode != 0:
    #sys.stdout.flush()
    #sys.stderr.flush()
    #print ("An error occurred when trying to install zc.buildout. "
           #"Look above this message for any errors that "
           #"were output by easy_install.")
    #sys.exit(exitcode)

#ws.add_entry(eggs_dir)
#ws.require(requirement)
#import zc.buildout.buildout

## If there isn't already a command in the args, add bootstrap
#if not [a for a in args if '=' not in a]:
    #args.append('bootstrap')


## if -c was provided, we push it back into args for buildout's main function
#if options.config_file is not None:
    #args[0:0] = ['-c', options.config_file]

#zc.buildout.buildout.main(args)
#if not options.eggs:  # clean up temporary egg directory
    #shutil.rmtree(eggs_dir)
###############################################################################
##
## Copyright (c) 2006 Zope Foundation and Contributors.
## All Rights Reserved.
##
## This software is subject to the provisions of the Zope Public License,
## Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
## THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
## WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
## WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
## FOR A PARTICULAR PURPOSE.
##
###############################################################################
#"""Bootstrap a buildout-based project

#Simply run this script in a directory containing a buildout.cfg.
#The script accepts buildout command-line options, so you can
#use the -c option to specify an alternate configuration file.
#"""

#import os
#import shutil
#import sys
#import tempfile

#from optparse import OptionParser

#__version__ = '2015-07-01'
## See zc.buildout's changelog if this version is up to date.

#tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')

#usage = '''\
#[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]

#Bootstraps a buildout-based project.

#Simply run this script in a directory containing a buildout.cfg, using the
#Python that you want bin/buildout to use.

#Note that by using --find-links to point to local resources, you can keep
#this script from going over the network.
#'''

#parser = OptionParser(usage=usage)
#parser.add_option("--version",
                  #action="store_true", default=False,
                  #help=("Return bootstrap.py version."))
#parser.add_option("-t", "--accept-buildout-test-releases",
                  #dest='accept_buildout_test_releases',
                  #action="store_true", default=False,
                  #help=("Normally, if you do not specify a --version, the "
                        #"bootstrap script and buildout gets the newest "
                        #"*final* versions of zc.buildout and its recipes and "
                        #"extensions for you.  If you use this flag, "
                        #"bootstrap and buildout will get the newest releases "
                        #"even if they are alphas or betas."))
#parser.add_option("-c", "--config-file",
                  #help=("Specify the path to the buildout configuration "
                        #"file to be used."))
#parser.add_option("-f", "--find-links",
                  #help=("Specify a URL to search for buildout releases"))
#parser.add_option("--allow-site-packages",
                  #action="store_true", default=False,
                  #help=("Let bootstrap.py use existing site packages"))
#parser.add_option("--buildout-version",
                  #help="Use a specific zc.buildout version")
#parser.add_option("--setuptools-version",
                  #help="Use a specific setuptools version")
#parser.add_option("--setuptools-to-dir",
                  #help=("Allow for re-use of existing directory of "
                        #"setuptools versions"))

#options, args = parser.parse_args()
#if options.version:
    #print("bootstrap.py version %s" % __version__)
    #sys.exit(0)


#######################################################################
## load/install setuptools

#try:
    #from urllib.request import urlopen
#except ImportError:
    #from urllib2 import urlopen

#ez = {}
#if os.path.exists('ez_setup.py'):
    #exec(open('ez_setup.py').read(), ez)
#else:
    #exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)

#if not options.allow_site_packages:
    ## ez_setup imports site, which adds site packages
    ## this will remove them from the path to ensure that incompatible versions
    ## of setuptools are not in the path
    #import site
    ## inside a virtualenv, there is no 'getsitepackages'.
    ## We can't remove these reliably
    #if hasattr(site, 'getsitepackages'):
        #for sitepackage_path in site.getsitepackages():
            ## Strip all site-packages directories from sys.path that
            ## are not sys.prefix; this is because on Windows
            ## sys.prefix is a site-package directory.
            #if sitepackage_path != sys.prefix:
                #sys.path[:] = [x for x in sys.path
                               #if sitepackage_path not in x]

#setup_args = dict(to_dir=tmpeggs, download_delay=0)

#if options.setuptools_version is not None:
    #setup_args['version'] = options.setuptools_version
#if options.setuptools_to_dir is not None:
    #setup_args['to_dir'] = options.setuptools_to_dir

#ez['use_setuptools'](**setup_args)
#import setuptools
#import pkg_resources

## This does not (always?) update the default working set.  We will
## do it.
#for path in sys.path:
    #if path not in pkg_resources.working_set.entries:
        #pkg_resources.working_set.add_entry(path)

#######################################################################
## Install buildout

#ws = pkg_resources.working_set

#setuptools_path = ws.find(
    #pkg_resources.Requirement.parse('setuptools')).location

## Fix sys.path here as easy_install.pth added before PYTHONPATH
#cmd = [sys.executable, '-c',
       #'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
       #'from setuptools.command.easy_install import main; main()',
       #'-mZqNxd', tmpeggs]

#find_links = os.environ.get(
    #'bootstrap-testing-find-links',
    #options.find_links or
    #('http://downloads.buildout.org/'
     #if options.accept_buildout_test_releases else None)
    #)
#if find_links:
    #cmd.extend(['-f', find_links])

#requirement = 'zc.buildout'
#version = options.buildout_version
#if version is None and not options.accept_buildout_test_releases:
    ## Figure out the most recent final version of zc.buildout.
    #import setuptools.package_index
    #_final_parts = '*final-', '*final'

    #def _final_version(parsed_version):
        #try:
            #return not parsed_version.is_prerelease
        #except AttributeError:
            ## Older setuptools
            #for part in parsed_version:
                #if (part[:1] == '*') and (part not in _final_parts):
                    #return False
            #return True

    #index = setuptools.package_index.PackageIndex(
        #search_path=[setuptools_path])
    #if find_links:
        #index.add_find_links((find_links,))
    #req = pkg_resources.Requirement.parse(requirement)
    #if index.obtain(req) is not None:
        #best = []
        #bestv = None
        #for dist in index[req.project_name]:
            #distv = dist.parsed_version
            #if _final_version(distv):
                #if bestv is None or distv > bestv:
                    #best = [dist]
                    #bestv = distv
                #elif distv == bestv:
                    #best.append(dist)
        #if best:
            #best.sort()
            #version = best[-1].version
#if version:
    #requirement = '=='.join((requirement, version))
#cmd.append(requirement)

#import subprocess
#if subprocess.call(cmd) != 0:
    #raise Exception(
        #"Failed to execute command:\n%s" % repr(cmd)[1:-1])

#######################################################################
## Import and run buildout

#ws.add_entry(tmpeggs)
#ws.require(requirement)
#import zc.buildout.buildout

#if not [a for a in args if '=' not in a]:
    #args.append('bootstrap')

## if -c was provided, we push it back into args for buildout' main function
#if options.config_file is not None:
    #args[0:0] = ['-c', options.config_file]

#zc.buildout.buildout.main(args)
#shutil.rmtree(tmpeggs)
#################################################################################
####
#### Copyright (c) 2006 Zope Foundation and Contributors.
#### All Rights Reserved.
####
#### This software is subject to the provisions of the Zope Public License,
#### Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
#### THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
#### WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#### WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
#### FOR A PARTICULAR PURPOSE.
####
#################################################################################
###"""Bootstrap a buildout-based project

###Simply run this script in a directory containing a buildout.cfg.
###The script accepts buildout command-line options, so you can
###use the -c option to specify an alternate configuration file.

###$Id$
###"""

###import os, shutil, sys, tempfile, urllib2
###from optparse import OptionParser

###tmpeggs = tempfile.mkdtemp()

###is_jython = sys.platform.startswith('java')

#### parsing arguments
###parser = OptionParser()
###parser.add_option("-v", "--version", dest="version",
                          ###help="use a specific zc.buildout version")
###parser.add_option("-d", "--distribute",
                   ###action="store_true", dest="distribute", default=False,
                   ###help="Use Disribute rather than Setuptools.")

###parser.add_option("-c", None, action="store", dest="config_file",
                   ###help=("Specify the path to the buildout configuration "
                         ###"file to be used."))

###options, args = parser.parse_args()

#### if -c was provided, we push it back into args for buildout' main function
###if options.config_file is not None:
    ###args += ['-c', options.config_file]

###if options.version is not None:
    ###VERSION = '==%s' % options.version
###else:
    ###VERSION = ''

###USE_DISTRIBUTE = options.distribute
###args = args + ['bootstrap']

###to_reload = False
###try:
    ###import pkg_resources
    ###if not hasattr(pkg_resources, '_distribute'):
        ###to_reload = True
        ###raise ImportError
###except ImportError:
    ###ez = {}
    ###if USE_DISTRIBUTE:
        ###exec urllib2.urlopen('http://python-distribute.org/distribute_setup.py'
                         ###).read() in ez
        ###ez['use_setuptools'](to_dir=tmpeggs, download_delay=0, no_fake=True)
    ###else:
        ###exec urllib2.urlopen('http://peak.telecommunity.com/dist/ez_setup.py'
                             ###).read() in ez
        ###ez['use_setuptools'](to_dir=tmpeggs, download_delay=0)

    ###if to_reload:
        ###reload(pkg_resources)
    ###else:
        ###import pkg_resources

###if sys.platform == 'win32':
    ###def quote(c):
        ###if ' ' in c:
            ###return '"%s"' % c # work around spawn lamosity on windows
        ###else:
            ###return c
###else:
    ###def quote (c):
        ###return c

###cmd = 'from setuptools.command.easy_install import main; main()'
###ws  = pkg_resources.working_set

###if USE_DISTRIBUTE:
    ###requirement = 'distribute'
###else:
    ###requirement = 'setuptools'

###if is_jython:
    ###import subprocess

    ###assert subprocess.Popen([sys.executable] + ['-c', quote(cmd), '-mqNxd',
           ###quote(tmpeggs), 'zc.buildout' + VERSION],
           ###env=dict(os.environ,
               ###PYTHONPATH=
               ###ws.find(pkg_resources.Requirement.parse(requirement)).location
               ###),
           ###).wait() == 0

###else:
    ###assert os.spawnle(
        ###os.P_WAIT, sys.executable, quote (sys.executable),
        ###'-c', quote (cmd), '-mqNxd', quote (tmpeggs), 'zc.buildout' + VERSION,
        ###dict(os.environ,
            ###PYTHONPATH=
            ###ws.find(pkg_resources.Requirement.parse(requirement)).location
            ###),
        ###) == 0

###ws.add_entry(tmpeggs)
###ws.require('zc.buildout' + VERSION)
###import zc.buildout.buildout
###zc.buildout.buildout.main(args)
###shutil.rmtree(tmpeggs)
###############################################################################
##
## Copyright (c) 2006 Zope Foundation and Contributors.
## All Rights Reserved.
##
## This software is subject to the provisions of the Zope Public License,
## Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
## THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
## WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
## WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
## FOR A PARTICULAR PURPOSE.
##
###############################################################################
#"""Bootstrap a buildout-based project

#Simply run this script in a directory containing a buildout.cfg.
#The script accepts buildout command-line options, so you can
#use the -c option to specify an alternate configuration file.

#$Id$
#"""

#import os, shutil, sys, tempfile, urllib2
#from optparse import OptionParser

#tmpeggs = tempfile.mkdtemp()

#is_jython = sys.platform.startswith('java')

## parsing arguments
#parser = OptionParser()
#parser.add_option("-v", "--version", dest="version",
                          #help="use a specific zc.buildout version")
#parser.add_option("-d", "--distribute",
                   #action="store_true", dest="distribute", default=False,
                   #help="Use Disribute rather than Setuptools.")

#parser.add_option("-c", None, action="store", dest="config_file",
                   #help=("Specify the path to the buildout configuration "
                         #"file to be used."))

#options, args = parser.parse_args()

## if -c was provided, we push it back into args for buildout' main function
#if options.config_file is not None:
    #args += ['-c', options.config_file]

#if options.version is not None:
    #VERSION = '==%s' % options.version
#else:
    #VERSION = ''

#USE_DISTRIBUTE = options.distribute
#args = args + ['bootstrap']

#to_reload = False
#try:
    #import pkg_resources
    #if not hasattr(pkg_resources, '_distribute'):
        #to_reload = True
        #raise ImportError
#except ImportError:
    #ez = {}
    #if USE_DISTRIBUTE:
        #exec urllib2.urlopen('http://python-distribute.org/distribute_setup.py'
                         #).read() in ez
        #ez['use_setuptools'](to_dir=tmpeggs, download_delay=0, no_fake=True)
    #else:
        #exec urllib2.urlopen('http://peak.telecommunity.com/dist/ez_setup.py'
                             #).read() in ez
        #ez['use_setuptools'](to_dir=tmpeggs, download_delay=0)

    #if to_reload:
        #reload(pkg_resources)
    #else:
        #import pkg_resources

#if sys.platform == 'win32':
    #def quote(c):
        #if ' ' in c:
            #return '"%s"' % c # work around spawn lamosity on windows
        #else:
            #return c
#else:
    #def quote (c):
        #return c

#cmd = 'from setuptools.command.easy_install import main; main()'
#ws  = pkg_resources.working_set

#if USE_DISTRIBUTE:
    #requirement = 'distribute'
#else:
    #requirement = 'setuptools'

#if is_jython:
    #import subprocess

    #assert subprocess.Popen([sys.executable] + ['-c', quote(cmd), '-mqNxd',
           #quote(tmpeggs), 'zc.buildout' + VERSION],
           #env=dict(os.environ,
               #PYTHONPATH=
               #ws.find(pkg_resources.Requirement.parse(requirement)).location
               #),
           #).wait() == 0

#else:
    #assert os.spawnle(
        #os.P_WAIT, sys.executable, quote (sys.executable),
        #'-c', quote (cmd), '-mqNxd', quote (tmpeggs), 'zc.buildout' + VERSION,
        #dict(os.environ,
            #PYTHONPATH=
            #ws.find(pkg_resources.Requirement.parse(requirement)).location
            #),
        #) == 0

#ws.add_entry(tmpeggs)
#ws.require('zc.buildout' + VERSION)
#import zc.buildout.buildout
#zc.buildout.buildout.main(args)
#shutil.rmtree(tmpeggs)
